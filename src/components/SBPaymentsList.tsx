import labels from "@/lib/messages/en.json";
import { Payment } from "@/lib/supabase";
import { dateFormatter, gridFormatters } from "@/util/formatters";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import useTheme from "@mui/material/styles/useTheme";
import useMediaQuery from "@mui/material/useMediaQuery";
import { GridColDef } from "@mui/x-data-grid";
import { useEffect, useState } from "react";
import StyledDataGrid, {
  GridBox,
  TSGridNoRowsOverlay,
} from "./TSStyledDataGrid";

/*
* Payments Schema
  id bigint generated by default as identity,
  created_at timestamp with time zone not null default now (),
  loan_id bigint null,
  payment_amount numeric null,
  payment_currency text null,
  payment_memo text null,
  user_id bigint null,
  constraint payments_pkey primary key (id),
  constraint payments_loan_id_fkey foreign key (loan_id) references loans (id) on delete restrict,
  constraint payments_user_id_fkey foreign key (user_id) references users (id) on delete restrict
*/

interface SBPaymentsListProps {
  payments: Payment[];
  clickDetailAction?: (loan_id: number, payment_id: number) => void;
}

function toHumanReadableDate(timestamp: string): string {
  const date = new Date(timestamp);

  const options: Intl.DateTimeFormatOptions = {
      day: '2-digit',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
  };

  // Using 'en-US' to ensure we get AM/PM formatting.
  return date.toLocaleDateString('en-US', options).replace(/,/, '');  // Remove comma
}

const transformPaymentsToGridRows = (payment: Payment) => {
  const created_at = toHumanReadableDate(payment.created_at);
  return {
    id: payment.id,
    created_at: created_at,
    user_id: payment.user_id,
    amount:`${payment.payment_amount || 0} ${payment.payment_currency}`,
    memo: payment.payment_memo,
    actions: {
      loanId: payment.loan_id,
    },
  };
};

const columnVisibilityModelDefault = {
  amount: true,
  memo: true,
  user_id: true,
  created_at: true,
  actions: true,
};

const columnVisibilityModelMD = {
  ...columnVisibilityModelDefault,
  memo: false,
};

const columnVisibilityModelXS = {
  ...columnVisibilityModelMD,
};

export default function PaymentsList({
  payments,
  clickDetailAction,
}: SBPaymentsListProps) {
  const theme = useTheme();
  const isFullScreen = useMediaQuery(theme.breakpoints.up("md"));
  const isMobileScreen = useMediaQuery(theme.breakpoints.down("sm"));

  const [visibleColumns, setVisibleColumns] = useState(
    columnVisibilityModelDefault
  );

  const [_, setSelectedRow] = useState<Payment | null>(null);

  const columns: GridColDef[] = [
    {
      field: "created_at",
      headerName: "Payment Date",
      flex: 1,
    },
    {
      field: "memo",
      headerName: "Memo",
      flex: 2,
    },
    {
      field: "amount",
      headerName: "Amount",
      headerAlign: "right",
      align: "right",
      flex: 1,
    },
    {
      field: "actions",
      headerName: "",
      hideSortIcons: true,
      disableColumnMenu: true,
      sortable: false,
      filterable: false,
      flex: 1,
      renderCell: (params) => {
        const { api } = params;
        const thisRow = api.getRow(params.id);
        const { actions } = thisRow;
        const onClickDetail = (event: React.SyntheticEvent) => {
          event.stopPropagation();
          setSelectedRow(thisRow);
          clickDetailAction && clickDetailAction(actions.loanId, thisRow.id);
        };

        return (
          <Button onClick={onClickDetail} variant="contained" color="primary">
            {labels.Buttons.viewDetails}
          </Button>
        );
      },
    },
  ];

  useEffect(() => {
    setVisibleColumns(
      isFullScreen
        ? columnVisibilityModelDefault
        : isMobileScreen
        ? columnVisibilityModelXS
        : columnVisibilityModelMD
    );
  }, [isFullScreen, isMobileScreen]);

  const rows = payments.map(transformPaymentsToGridRows);

  return (
    <GridBox>
      <Box>
        <StyledDataGrid
          rows={rows}
          columns={columns}
          columnVisibilityModel={visibleColumns}
          autoHeight={true}
          density="comfortable"
          hideFooterSelectedRowCount={true}
          hideFooter={true}
          showColumnVerticalBorder={false}
          isRowSelectable={() => false}
          slots={{
            noRowsOverlay: TSGridNoRowsOverlay,
          }}
          sx={{
            border: "none",
          }}
        />
      </Box>
    </GridBox>
  );
}
